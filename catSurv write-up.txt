catSurv
Erin, Alex, Matt, Minhee
4/29/16

************
S4 Cat Class
************
Slots:
guessing, discrimination, answers, priorName, priorParams, lowerBound, upperBound, quadPoints, difficulty, X, Theta.et, poly, integration, estimation, selection, coverage, points

Prototype:
A binary Cat object with three questions. (see Cat-class.R for more info)
(“initialize” method includes validity check)

Validity checks:
- guessing, discrimination, answers, and difficulty must all be the same length (and of length greater than 1)
- discrimination and guessing are not NA
Additional checks for polygamous Cats:
- difficulty slot must be a list (each element of the list corresponds to a question item)
- difficulty values for a given question item must be strictly increasing, and not NA

Getters and Setters:
Getters and setters have been included for the following slots: 
- guessing, discrimination, priorParams, priorName, lowerBound, upperBound, quadPoints, difficulty, poly, integration, estimation, selection, coverage, points
All setters include an argument of “valid” which determines whether to run a validity check on the modified Cat object. Default to TRUE.
All setters take the format: setSlot(object, valid=T)<-value


*********************
Cat Creator Functions
*********************

Functions catBiCreator and catPolyCreator have been included in the package. These functions created lists of Cat objects with randomly assigned values, to allow for robust function testing. (see catBiCreator.R and catPolyCreator.R for more info)

TO DO: randomize priorName, estimation, and priorParams, and possibly other slots


**********
Help files
**********

Help files have been included for the following functions in the package:
- probability, likelihood, estimateTheta, estimateSE, prior, catBiCreator, catPolyCreator, setGuessing, setDiscrimination, (other setters)

TO DO: add help files to rest of functions
TO DO: get help files to link to each other (under “See Also”)


*************
Documentation 
*************

The following updates need to be made to the master documentation file:
—definitions of applicable_rows and non_applicable rows - needs to be reversed
-resolve whether the slot is named ‘estimation’ or ‘estimation_method’
—polytomous probability - is actually ‘probability of a response in category strictly higher than k (currently says k or higher)
—polytomous likelihood (3.1.2 paragraph 1) - says ‘discrimination’ parameters, should say ‘difficulty’/‘threshold’
—9.1 FisherInf: there is an alpha where it should just be an ‘a’
—estimation_method (p2) says only current valid value is EAP
—polytomous likelihood - says P*_ijC_i, should say P*_ijK_i
-for polytomous likelihood: we have dropped the ‘D’ value; and we are now using the absolute value of ‘a’ (discrimination)
-likelihood no longer takes an ‘items’ argument; instead, it runs on all question items that have been answered (ie. that are not NA)


***********
Probability
***********

Binary and polytomous probability functions both pass robust tests. 
Problem with discrimination values: when discrimination is negative, probability values within a given question item of a polytomous Cat are increasing with higher response categories. 

TO DO: Use absolute value of discrimination, rather than just discrimination, and make corresponding change to Likelihood function.


**********
Likelihood
**********

Binary and polygamous likelihood functions both pass robust test. 

TO DO: For polytomous Cats, for question items for which discrimination is negative, need to reverse the order of the “exact probability” vector (the vector of probabilities of a response in exactly response category k; see equation (4) in the documentation)

******
ObsInf
******

Tests do not pass. We don’t know why. On a very basic Cat object, we get a ‘vector indexing out of bounds’ error.

**********
C++
**********

In general, the refactoring of Cat and the classes it relies on is done. The main goal was to break Cat into severaly smaller, resuable components that could be replaced, changed, and used independently of one another, and that goal was largely achieved. However, there are a number of bugs in the implementation. We suspect that most of the errors are either mistakes in the underlying math, or off-by-one errors resulting from transitioning between R-style and C++-style indexing. 

In terms of structure, main.cpp contains the functions that are exposed to Rcpp, but, instead of actually implementing any of their logic, it delegates that task to the class Cat. Cat, in turn, contains five main instance variables which handle its various tasks: Estimator, Integrator,  Selector, Prior, and QuestionSet.

Estimator is the parent class of EAPEstimator and MAPEstimator, responsible for computing the estimations (e.g. likelihood, theta) necessary for the Cat using various strategies. It is an abstract class, which both its children concretize.

Integrator computes the integral of a function, using GSL's adaptive quadrature method. To enable easy interaction with GSL, it uses GSLFunctionWrapper, which wraps C++ functions and lambdas in a way that allows them to be passed to GSL's functions as arguments.

Selector is the parent class of MWPISelector, MFISelector, EPVSelector, and MEISelector, responsible for both determining what the next item to be selected should be and returning an object containing that information. The information returned by a Selector is represented by the Selection object, in order to decrease coupling between the C++ and R data structures generated during a selection, as well as to avoid repeating the very generic code that generates an R List from a selection.

Prior is responsible for computations related to prior distributions, for instance, the pdf of a non-central t-distribution. It relies on Boost's statistical distribution header.

QuestionSet contains the raw data used to make computations ñ the status of each question, the discrimination values, and whether or not the data is polytomous, among other data points. It contains no methods other than a constructor.

****************
Additional Tests
****************

I test the following functions using all combinations of the following: binary/categorical Cats, normal/student's t distribution, MAP/EAP estimation type.


prior()
*******
is returning answers.  Test function shows it returns correct values for all test Cats. We need to make sure documentation & is consistent with how those strings are written ("NORMAL" and "STUDENT_T" or something different).

estimateTheta()
***************
is returning answers.  Test function shows it returns correct values except for 1 test Cat, a binary, EAP, student's t Cat.  Difference in answers is .15  

estimateSE()
************
is returning answers.  Test function shows it returns correct values except for 3 test where the differences are  .04, .14, and .07 between the test and c++ function.   These Cats are a mix of binary/poly and EAP/MAP.  They are all student's t distribution.

expectedPV()
************
is only returning answers for binary Cats.  It is throwing "Error: vector" for categorical Cats, so it is trying to access something out of bounds.  For binary Cats, the 2 largest differences between test and c++ functions are .01 and .07.

nextItem()
**********
EPV: is not returning any values.  It won't work for categorical Cats because expectedPV() isn't working for them.  For binary Cats, it throws  "Error: vector" for EAP estimation (and will sometimes crash R), so it is trying to access something out of bounds.  For MAP estimation type, it runs forever...  Test function is written.

MEI: it is accessing something out of bounds for all EAP Cats.  It runs forever for MAP cats.  This wasn't a super systematic check of which Cats cause which problems, though.  Test function is written.

MPWI: Test function is written.  It throws an error: “MPWI is not a valid selection type”.. so we need to add that to c++ code.

expectedObsInf()
***************
is returning values for all MAP Cats (binary and categorical); however, these values are different from the test function.  It is returning values for all EAP Cats except 2:  it crashes for one EAP, binary, student's t distribution Cat, and it is trying to access something out of bounds for one EAP, binary, normal distribution Cat.  The test function needs work for categorical Cats.

dLL()
*****
is returning values.  Test function is written.

d2LL()
******
is returning values.  Test function is written.






 

