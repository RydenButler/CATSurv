% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{checkStopRules}
\alias{checkStopRules}
\title{Check if Stop and/or Override Rules are Met}
\usage{
checkStopRules(cat_df)
}
\arguments{
\item{cat_df}{An object of \code{Cat} class}
}
\value{
A boolean, where TRUE indicates the the stopping rules are met and FALSE indicates the stoppings rules are not met
}
\description{
This function returns a boolean indicating if the respondent should not be asked futher questions after evaluating the specified stopping and/or override rules
}
\details{
The stopping rule thresholds are stored in the following Cat object slots: lengthThreshold, seThreshold, infoThreshold, and gainThreshold.
  The override thresholds are stored in the following Cat object slots: lengthOverride, gainOverride.  A value of NA indicates the rule should not be used.

  A return value of TRUE indicates that additional questions should be asked; FALSE indicates no additional questions should be asked.

  A user can specify any combination of stopping rules and/or overrides.  The function returns TRUE if all specified stopping rules are met
  and no specified overrides are met.  The function returns FALSE if at least one specified stopping rule is not met, or if any specified override threshold is met.

  Stopping Rules:

  lengthThreshold: Number of question's answered >= a
 
  seThreshold: \eqn{SE(\hat{\theta}) < a}
 
  infoThreshold: \deqn{FI < a \forall}{FI < a \forall} remaining items

  gainThreshold: \deqn{SE(\hat{\theta}) - \sqrt{EPV} | < a \forall}{SE(\hat{\theta}) - \sqrt{EPV} | < a \forall} remaining items

  Overrides:

  lengthOverride: Number of question's answered < a

  gainOverride: \deqn{|SE(\hat{\theta}) - \sqrt{EPV} | >= a \forall}{|SE(\hat{\theta}) - \sqrt{EPV} | >= a \forall} remaining items
}
\examples{

## binary (ltm)

 data("npi")
 ltm_data <- npi[1:100, ]
 ltm_cat <- ltmCat(ltm_data, quadraturePoints = 100)
 
 checkStopRules(ltm_cat)
 
 ltm_cat@answers[1:2] <- c(1,0)
 ltm_cat@lengthThreshold <- 2
 
 checkStopRules(ltm_cat)
 
## binary (tpm)

 data("AMTknowledge")
 tpm_data <- AMTknowledge[1:100, ]
 tpm_cat <- tpmCat(tpm_data, quadraturePoints = 100)
 
 checkStopRules(tpm_cat)

 tpm_cat@seThreshold <- 4
 
 checkStopRules(tpm_cat)
 
## categorical (grm) 

 data("nfc")
 poly_data <- nfc[1:100, ]
 poly_cat <- grmCat(poly_data, quadraturePoints = 100)
 
 checkStopRules(poly_cat)
 
 poly_cat@gainThreshold <- 3
 
 checkStopRules(poly_cat)

}
\seealso{
\code{\link{Cat}} for additional information on stopping rules
}

